1 RAID 磁盘阵列
   RAID0:将多块硬盘设备通过硬件或软件的方式组合在一起，数据在存储时是依次存入各个磁盘中，读取时也是从多个磁盘中同时读取，可以使磁盘I/O速度提升数倍，但任何一块硬盘的损坏都会导致数据信息的损坏，所以在一定程度上牺牲了数据的安全性
   
   RAID1：与RAID0相反，RAID1通过将两块以上硬盘设备绑定，写入数据时将数据同时写入多组硬盘中，相当于镜像或备份，提升了数据的安全性，但牺牲了数据的读写速度
   
   RAID5:在读写速度和数据安全间作出妥协，RAID5技术是把硬盘设备的数据奇偶校验信息保存到其他硬盘设备中。RAID 5磁盘阵列组中数据的奇偶校验信息并不是单独保存到某一块硬盘设备中，而是存储到除自身以外的其他每一块硬盘设备上，这样的好处是其中任何一设备损坏后不至于出现致命缺陷
   
   RAID10：结合了RAID1和RAID0的优点，先制作一组RHID1磁盘阵列，在对这些RHID1磁盘阵列使用RHID0磁盘阵列技术，通过提高成本，使得磁盘兼具高读写速度和安全性
      
    热备盘，平时不工作，当一组磁盘阵列中有一块硬盘损坏时，会自动顶替其工作，避免一组硬盘同时损坏。
    
   
   1 部署RAID10磁盘阵列
      先往系统中添加4块新硬盘
      mdadm命令：用于管理Linux系统中的软件RAID硬盘阵列
      格式为：mdadm 模式 RAID设备名称 选项 成员设备名称
      参数 	作用
      -a 	自动创建设备
      -n 	指定设备数量
      -l 	指定RAID级别
      -C 	创建
      -v 	显示过程
      -f 	模拟设备损坏
      -r 	移除设备
      -Q 	查看摘要信息
      -D 	查看详细信息
      -S 	停止RAID磁盘阵列
      -x    添加热备盘
      1[root@localhost Desktop]# madadm -Cv /dev/md0 -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde
      -C参数代表创建一个RAID阵列卡；-v参数显示创建的过程，同时在后面追加一个设备名称/dev/md0，这样/dev/md0就是创建后的RAID磁盘阵列的名称；-a yes
      参数代表自动创建设备文件；-n 4参数代表使用4块硬盘来部署这个RAID磁盘阵列；而-l 10参数则代表RAID 10方案；最后再加上4块硬盘设备的名称
      
      mdadm -D /dev/md127 查看阵列详细信息
      等待其初始化，通过-D可以查看进度
      
      2 对阵列进行分区:(如果磁盘容量较小可以不做)
      [root@localhost Desktop]# fdisk /dev/md0
      磁盘阵列的分区编号格式为 /dev/md0p编号  /dev/md0p1
      3格式化磁盘阵列分区
      [root@localhost Desktop]# mkfs.xfs /dev/md0p1
      
      4 挂载磁盘阵列
      [root@localhost ~]# mount /dev/md0p1 /media/RAID_P1
      
      5 将挂载信息写入/etc/fstab配置文件中
      
   2 损坏磁盘阵列及修复
      当某一块硬盘损坏后，使用mdadm命令移除该盘 mdadm /dev/md0 -f /dev/sdb
      再用该命令添加新的盘 使用-a参数
      
   3磁盘阵列+备份盘
   RAID5+热备盘
   先往系统中添加3块新磁盘+一块热备盘
   1 用mdadm 命令添加RAID5磁盘阵列加上一块热备盘 
   [root@localhost Desktop]# mdadm -Cv /dev/md0 -n 3 -x 1 -l 5 /dev/sd[b-d] /dev/sde
   等待其初始化完成
   2 格式化
   3 挂载
   5 写入配置文件
   
   现实中如何处理故障：
   1 通过指示灯找出故障硬盘，然后换上新的硬盘
   2 用mdadm命令移除故障盘 mdadm 磁盘阵列 -r 损坏磁盘  [root@localhost Desktop]# mdadm /dev/md0 -r /dev/sde
   3 mdadm添加新硬盘 mdadm -a 磁盘阵列 新磁盘  [root@localhost Desktop]# mdadm -a /dev/md0 /dev/sde
   
   
   
2 LVM 逻辑卷管理器
 LVM可以允许用户对硬盘资源进行动态调整,动态调整磁盘容量
 物理卷[PV，Physical Volume] 卷组[VG，Volume Group] 逻辑卷[LV，Logical Volume] 基本单元[PE，Physical Extent]大小为4M,
 逻辑卷的大小必须是基本单元的倍数
  LVM部署命令：
  功能/命令 	物理卷管理 	卷组管理 	逻辑卷管理
      扫描 	pvscan 	    vgscan 	   lvscan
      建立 	pvcreate 	 vgcreate 	lvcreate 切割卷组
      显示 	pvdisplay 	 vgdisplay 	lvdisplay
      删除 	pvremove 	 vgremove 	lvremove
      扩展 		       vgextend(添加新设备) 	lvextend
      缩小 		      vgreduce(移除旧设备) 	lvreduce
 
 1 PV(让硬盘支持LVM技术)
   pvcreate命令：使指定磁盘支持LVM技术
   pvcreate /dev/sdb /dev/sdc
 
 
 2 VG(将磁盘组成一个大的卷组)
  vgcreate /dev/sdb /dev/sdc
 3 LV(对卷组进行切片)
  方法一：指定容量大小 -L
  方法二：指定PE个数 -l
  lvcreate -n vo -l 100 storage
  
 4格式化逻辑卷 (不能使用xfs格式，xfs不支持lvm)
  mkfs.ext4 /dev/storage/vo
  
 5挂载 并写入配置文件中
 mount /dev/storage/vo /media/newLV

3扩容逻辑卷
扩容前一定要卸载逻辑卷,并退出挂载目录

1卸载逻辑卷
umount /dev/storage/vo

2扩容逻辑卷  参数中的大小指的是扩展后的大小,如果不能被4整除，则会向上多取一个PE
lvextend -L 800M /dev/storage/vo

3检查文件系统数据完整性
e2fsck -f /dev/storage/vo

4通知文件系统逻辑卷容量发生变化
resize2fs /dev/storage/vo

5 重新挂载
mount -a  因为已经写入配置文件中的最后一行，可以直接加上-a参数挂载
  
4 缩小逻辑卷
  1卸载逻辑卷
  umount /dev/storage/vo
  
  2 e2fsck 检查数据完整性
  e2fsck -f /dev/storage/vo
  
  3 resize2fs 通知文件系统逻辑卷要变成的大小,检查是否有条件缩小
  resize2fs /dev/storage/vo 300M
  
  4 lvreduce 缩小逻辑卷
  lvreduce -L 300M /dev/storage/vo
  
  5挂载 mount -a
 
5 生成快照卷 可用于还原指定逻辑卷，其实是做一次完整备份
    快照卷的容量必须等同于逻辑卷的容量；快照卷仅一次有效，一旦执行还原操作后则会被立即自动删除。
    
    1 lvcreate制作快照卷
     [root@localhost ~]# lvcreate -L 300M -s -n SNAP /dev/storage/vo
      -s即指明创建快卷照，-n后面跟快照卷名称 最后跟要拍摄快照的逻辑卷
      
   2 使用快照卷恢复数据
     1 卸载逻辑卷
     umount /media/newLV
     
     2 lvconvert 合并数据
     lvconvert --merge /dev/storage/SNAP  不用写要恢复的逻辑卷，只要写快照卷
     
     3重新挂载原逻辑卷
     mount -a
     
     
6 卸载删除LVM
   1 删除配置文件fstab中的信息
   
   2 卸载逻辑卷 umount
   
   3 移除逻辑卷
    [root@localhost ~]# lvremove /dev/storage/vo
   4 移除卷组
    [root@localhost ~]# vgremove /dev/storage
   5 移除物理卷
    [root@localhost ~]# pvremove /dev/sd[b-c]

    
    
    
   
   
   
