    
1 vim 文本编辑器    
命令模式：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。
    
输入模式：正常的文本录入。

末行模式：保存或退出文档，以及设置编辑环境。

可以分别使用a、i、o三个键从命令模式切换到输入模式。其中，a键与i键分别是在光标后面一位和光标当前位置切换到输入模式，而o键则是在光标的下面再创建一个空行.
命令 	作用
dd 	删除（剪切）光标所在整行
5dd 	删除（剪切）从光标处开始的5行
yy 	复制光标所在整行
5yy 	复制从光标处开始的5行
n 	显示搜索命令定位到的下一个字符串
N 	显示搜索命令定位到的上一个字符串
u 	撤销上一步的操作
p 	将之前删除（dd）或复制（yy）过的数据粘贴到光标后面

末行命令
命令 	作用
:w 	保存
:q 	退出
:q! 	强制退出（放弃对文档的修改内容）
:wq! 	强制保存退出
:set nu 	显示行号
:set nonu 	不显示行号
:命令 	执行该命令
:整数 	跳转到该行
:s/one/two 	将当前光标所在行的第一个one替换成two
:s/one/two/g 	将当前光标所在行的所有one替换成two
:%s/one/two/g 	将全文中的所有one替换成two
?字符串 	在文本中从下至上搜索该字符串
/字符串 	在文本中从上至下搜索该字符串

2 shell脚本
#!/bin/bash  #指明shell解释器
#my first shell
echo "The name of the shell is $0" # $0 指明该shell文件的文件名
echo "the amount of args is $#, their value are $*" # $# 返回在命令行中外部输入参数的个数, $* 返回所有参数的值
echo "the first arg is $1, the second is $2" # $1,$2等返回指定位置的参数的值
echo "Done!"

测试语句：
     格式>>>[ 条件表达式 ] 若条件表达式执行成功，返回0，否则返回非0
     文件测试：
     [ -d /etc/fstab ]
     操作符 	作用
     -d 	测试文件是否为目录类型
     -e 	测试文件是否存在
     -f 	判断是否为一般文件
     -r 	测试当前用户是否有权限读取
     -w 	测试当前用户是否有权限写入
     -x 	测试当前用户是否有权限执行

     逻辑判断：
     逻辑与：语句1 && 语句2 只有语句1执行成功才会执行语句2 [root@localhost layer1]# [ -w my_shell.sh ] && echo "writeable"
     逻辑或：语句1 || 语句2  只有语句1执行失败才会执行语句2  短路原则 [ -w my_shell.h ] || echo "unwriteable"
     逻辑非： ！语句1 将一个语句的逻辑值取反  [ ! -w my_shell.sh ] && echo "writeable"

     数字比较：
     [root@localhost layer1]# [ 15 -ge 22 ]
     操作符 	作用
    -eq 	是否等于
    -ne 	是否不等于
    -gt 	是否大于
    -lt 	是否小于
    -le 	是否等于或小于
    -ge 	是否大于或等于

     字符串比较：
     [root@localhost layer1]# [ "noob" = "noobs" ] [root@localhost layer1]# [ "noob" != "noobs" ]
     操作符 	作用
     = 	 比较字符串内容是否相同
     !=  比较字符串内容是否不同
     -z  判断字符串内容是否为空
 
流程控制语句:
    if 语句：
    #!/bin/bash
    #Exam program
    read -p "please input your score>>>" SCORE #read 命令用于读取用户的输入并赋值给指定变量，-p参数用于在屏幕上输出指定信息
    if [ $SCORE -gt 100 ]
        then
        echo "Invalid input!"
    elif [ $SCORE -ge 85 ]
        then
        echo "Excellent!"
    elif [ $SCORE -ge 70 ]
        then
        echo "Just so so!"
    else 
        echo "Ops!"
    fi
    
    
    for循环:
        #!/bin/bash
        #create user info
        for NAME in `cat user.txt`   #从列表文件中逐行读取信息
        do
            read -p "please input the password of $NAME>>>" PASSWD
            if [ $NAME = "downtiser" ]
            then echo "Ha, the user $NAME is the root user!"
            else
            echo "UID:$NAME PASSWORD:$PASSWD" >> user_info.txt
            fi
        done
        echo "Done!"

    
    while循环:
        #!/bin/bush
        #guess num program
        PRICE=$(expr $RANDOM % 1000) #expr 提取算式值
        COUNT=0
        while true #while 后面跟测试语句，也可以加上true使循环一直进行直到循环体内有退出exit命令
        do 
            read -p "Please input the number you guess(0-999)>>>" GUESS
            if [ $COUNT -gt 10 ]
            then 
                echo "Ops! You have tried too many times! you idiot!"
                exit 0
            elif [ $GUESS -lt $PRICE ]
            then
               let COUNT++
               echo "Too small! $COUNT chances used"
            elif [ $GUESS -gt $PRICE ]
            then
               let COUNT++
               echo "Too large! $COUNT chances used"
            else 
            let COUNT++
            echo "Good job! You got it! you have tried [$COUNT] times"
            exit 0
            fi
        done
        echo "Done"
        
    case条件测试语句：
        #!/bin/bash
        #check key program
        read -p "please input the key>>>" KEY
        case $KEY in  #传递变量值
        [a-z]|[A-Z])  #判断值是否符合该模式
        echo "The key is an alphabet"
        ;;
        [0-9])
        echo "The key is an number"
        ;;
        *)  #若以上模式都未成功匹配，则执行该模式下的语句
        echo "The key is not an alphanum"
        esac  #结束符


计划服务程序：
    一次性计划任务
    at命令：为系统在在指定时间安排一个一次性任务
    命令格式
    [root@localhost layer3]# at 17:30
    at> systemctl restart httpd
    at> <EOT>
    job 3 at Mon Jul 30 17:30:00 2018
    [root@localhost layer3]# at -l
    3	Mon Jul 30 17:30:00 2018 a root
    
    或者利用管道符：echo "systemctl restart httpd" | at 17:30
    
    atrm: 移除一个指定的计划
    命令格式：
    atrm 计划编号
    
    
    长期计划任务：
    crontab命令：使系统能够有规律的，周期性的执行某项任务
    命令格式：
    编辑计划任务命令：
    crontab -e
    查看当前计划任务命令：
    crontab -l
    删除某项计划任务命令:
    crontab -r
    
    计划命令时间格式参数：分 时 日 月 星期  如果某个字段没有设置，需要用*代替，其中 分 必须写，日 与 星期只能写一个
    字段 	说明
    分钟 	取值为0～59的整数
    小时 	取值为0～23的任意整数
    日期 	取值为1～31的任意整数
    月份 	取值为1～12的任意整数
    星期 	取值为0～7的任意整数，其中0与7均为星期日
    命令 	要执行的命令或程序脚本   #！在crond服务的计划任务参数中，所有命令一定要用绝对路径的方式来写，可以用whereis命令查看命令绝对路径
    需要说明的是，除了用逗号（,）来分别表示多个时间段，例如“8,9,12”表示8月、9月和12月。还可以用减号（-）来表示一段连续的时间周期
    （例如字段“日”的取值为“12-15”，则表示每月的12～15日）。以及用除号（/）表示执行任务的间隔时间（例如“*/2”表示每隔2分钟执行一次任务）。

     
     
       
     
 
 





